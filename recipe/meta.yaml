{% set tests_to_skip = "_not_a_real_test" %}
{% set version = "0.12.0" %}

package:
  name: tango-split
  version: {{ version }}

source:
  url: https://github.com/allenai/tango/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 23906ba37d9bbeb0f01d921472df523496962c663f5dd7ba9412e8fd9e42f077
  patches:
    # fix a test that's too strict for our infra
    - patches/0001-relax-assumptions-about-elapsed-time-for-multicore-t.patch

build:
  number: 0
  skip: true  # [win]

# Need these up here for conda-smithy to handle them properly.
requirements:
  host:
    - python
  run:
    - python

outputs:
  - name: tango
    build:
      script: {{ PYTHON }} -m pip install . --no-deps -vv
      skip: true  # [win]
      entry_points:
        - tango=tango.__main__:main
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
      host:
        - python
        - pip
        - setuptools <60
        - wheel
      run:
        - python
        - base58
        - cached_path >=1.0,<1.2
        - click >=7.0,<8.1.4
        - click-help-colors >=0.9.1,<0.10.0
        - dill
        - filelock >=3.4,<3.8
        - glob2 >=0.7
        - jsonnet >=0.10.0  # [not win]
        - more-itertools >=8.0,<9.0
        - petname >=2.6,<3.0
        - python-xxhash
        - pytz
        - pyyaml >=5.4.1,<6.1
        - rich >=12.3,<13.0
        - sqlitedict
        - tqdm >=4.62,<4.65
    test:
      requires:
        - pytest
        - flaky
        - git
      source_files:
        - tests/
        - test_fixtures/
        # needed by a test
        - examples/
      imports:
        - tango
      commands:
        - tango --help
        {% set tests_to_skip = "_not_a_real_test" %}
        # test_experiment_with_logging_and_multiprocessing seems to fail
        # spuriously while trying to match exact logging output
        {% set tests_to_skip = tests_to_skip + " or test_experiment_with_logging_and_multiprocessing" %}
        # test makes assumptions about exact hashes that are not reproducible for us
        {% set tests_to_skip = tests_to_skip + " or test_deterministic_experiment" %}
        - pytest tests/ --ignore=tests/integrations -v -k "not ({{ tests_to_skip }})"

  - name: tango-all
    build:
      skip: true  # [win]
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('tango', exact=True) }}
        - {{ pin_subpackage('tango-beaker', exact=True) }}
        - {{ pin_subpackage('tango-datasets', exact=True) }}
        - {{ pin_subpackage('tango-fairscale', exact=True) }}
        - {{ pin_subpackage('tango-pytorch_lightning', exact=True) }}
        - {{ pin_subpackage('tango-torch', exact=True) }}
        - {{ pin_subpackage('tango-transformers', exact=True) }}
        - {{ pin_subpackage('tango-wandb', exact=True) }}
    test:
      imports:
        # see other outputs for more specific tests
        - tango
      requires:
        - pip
      commnds:
        # run only once for all subpackages
        - pip check

  - name: tango-beaker
    build:
      skip: true  # [win]
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('tango', exact=True) }}
        - beaker-py >=1.6.2,<2
    test:
      imports:
        - tango.integrations.beaker
      # basically all tests require a token we don't have. Perhaps
      # we'll get a special setup accommodated by upstream, see
      # https://github.com/conda-forge/staged-recipes/pull/19771#issuecomment-1194356768
      # requires:
      #   - pytest
      #   - flaky
      #   - git
      # source_files:
      #   - test_fixtures/
      #   - tests/
      # commands:
      #   - pytest -v tests/integrations/beaker

  - name: tango-datasets
    build:
      skip: true  # [win]
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('tango', exact=True) }}
        - datasets >=1.12,<3
    test:
      imports:
        - tango.integrations.datasets
      requires:
        - pytest
        - flaky
        - git
      source_files:
        - test_fixtures/
        - tests/
      commands:
        - pytest -v tests/integrations/datasets

  - name: tango-fairscale
    build:
      skip: true  # [win]
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('tango', exact=True) }}
        - fairscale =0.4.6
        - numpy
        - pytorch >=1.9,<1.13
    test:
      imports:
        - tango.integrations.fairscale
      requires:
        - pytest
        - flaky
        - git
      source_files:
        - test_fixtures/
        - tests/
      commands:
        - pytest -v tests/integrations/fairscale

  - name: tango-pytorch_lightning
    build:
      skip: true  # [win]
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('tango', exact=True) }}
        - pytorch >=1.9,<1.13
        - pytorch-lightning >=1.6.0,<1.7.0
    test:
      imports:
        - tango.integrations.pytorch_lightning
      requires:
        - pytest
        - flaky
        - git
      source_files:
        - test_fixtures/
        - tests/
      commands:
        - pytest -v tests/integrations/pytorch_lightning

  - name: tango-torch
    build:
      skip: true  # [win]
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('tango', exact=True) }}
        - numpy
        - pytorch >=1.9,<1.13
    test:
      imports:
        - tango.integrations.torch
      requires:
        - pytest
        - flaky
        - git
      source_files:
        - test_fixtures/
        - tests/
      commands:
        - pytest -v tests/integrations/torch

  - name: tango-transformers
    build:
      skip: true  # [win]
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('tango', exact=True) }}
        - datasets >=1.12,<3
        - numpy
        - pytorch >=1.9,<1.13
        - sentencepiece >=0.1.96
        - transformers >=4.12.3
    test:
      imports:
        - tango.integrations.transformers
      requires:
        - pytest
        - flaky
        - git
      source_files:
        - test_fixtures/
        - tests/
      commands:
        - pytest -v tests/integrations/transformers

  - name: tango-wandb
    build:
      skip: true  # [win]
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('tango', exact=True) }}
        - pytorch >=1.9,<1.13
        - wandb >=0.12,<0.13
    test:
      imports:
        - tango.integrations.wandb
      requires:
        - pytest
        - flaky
        - git
      source_files:
        - test_fixtures/
        - tests/
      commands:
        # all the tests in workspace_test.py need an API token we don't have
        - pytest -v tests/integrations/wandb -k "not (workspace_test or test_step_cache_artifact_not_found)"

about:
  home: https://github.com/allenai/tango
  license: Apache-2.0
  license_file: LICENSE
  summary: AI2 Tango replaces messy directories and spreadsheets full of file versions by organizing experiments into discrete steps that can be cached and reused throughout the lifetime of a research project.
  description: |
    AI2 Tango is a platform that allows you to build machine learning experiments
    out of steps that can be reused and repeated. It eliminates duplicate work,
    stores past results, and keeps track of how they were obtained so you can
    quickly identify and trace back your best work. Experiments are flexible,
    so you can change direction, pursue another idea and incorporate feedback,
    without losing previous results. Write your own steps by wrapping common
    Python functions, or take advantage of the library of pre-built steps for
    training models, working with datasets, and running evaluations. It is
    integrated with popular tools like the Huggingface transformers library,
    PyTorch Lightning, and others.
  doc_url: https://ai2-tango.readthedocs.io
  dev_url: https://github.com/allenai/tango

extra:
  recipe-maintainers:
    - h-vetinari
  feedstock-name: tango
